#include <EtherCard.h>

#define STATIC 0 // set to 1 to disable DHCP (adjust myip/gwip values below)

// mac address
static byte mymac[] = {0x74, 0x69, 0x69, 0x2D, 0x30, 0x31};
// ethernet interface ip address
static byte myip[] = {192, 168, 0, 200};
// gateway ip address
static byte gwip[] = {192, 168, 0, 1};

// LED to control output
int ledPin10 = 9;

byte Ethernet::buffer[700];

char const page[] PROGMEM =
    "HTTP/1.0 503 Service Unavailable\r\n"
    "Content-Type: text/html\r\n"
    "Retry-After: 600\r\n"
    "\r\n"
    "<html>"
    "<head><title>"
    "Service Temporarily Unavailable"
    "</title></head>"
    "<body>"
    "<h3>This page is used behind the scene</h3>"
    "<p><em>"
    "Commands to control LED are transferred to Arduino.<br />"
    "The syntax: http://192.168.0.XX/?LED10=OFF or ON"
    "</em></p>"
    "</body>"
    "</html>";

void setup()
{
}

void loop()
{

    word len = ether.packetReceive();
    word pos = ether.packetLoop(len);

    // IF LED10=ON turn it ON
    if (strstr((char *)Ethernet::buffer + pos, "GET /?LED10=ON") != 0)
    {
        Serial.println("Received ON command");
        digitalWrite(ledPin10, HIGH);
    }

    // IF LED10=OFF turn it OFF
    if (strstr((char *)Ethernet::buffer + pos, "GET /?LED10=OFF") != 0)
    {
        Serial.println("Received OFF command");
        digitalWrite(ledPin10, LOW);
    }

    // show some data to the user
    memcpy_P(ether.tcpOffset(), page, sizeof page);
    ether.httpServerReply((sizeof page) - 1);
}

void blinkLed()
{
    while (true)
    {
        digitalWrite(ledPin10, HIGH);
        delay(500);
        digitalWrite(ledPin10, LOW);
        delay(500);
    }
}